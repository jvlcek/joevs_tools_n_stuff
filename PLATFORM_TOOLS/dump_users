#!/usr/bin/env ruby

require 'trollop'

# Copy  this file to: /var/www/miq/vmdb/dump_users
#
# run with:
# vmdb
# chmod a+x dump_users
# bundle exec rails runner dump_users

# requireing config/environment allows this file to be run on the command line
# without the "bundle exec rails runner" overhead
# e.g.:
# ./dump_users
require File.expand_path('config/environment', __dir__)

class Dump

  attr_accessor :opts

  def initialize(args = {})  
    self.opts = args.delete_if { |_k, v| v.blank? }
  end

  def run
    delete_a_user               if opts[:delete_a_user_given]
    delete_all_users            if opts[:delete_all_users]
    dump_groups                 if opts[:dump_groups]
    dump_group_description_only if opts[:dump_group_description_only]
    dump_users                  if opts[:dump_users]
    dump_userid_only            if opts[:dump_userid_only]
    dump_one_user               if opts[:dump_one_user]
  end

  private

  def dump_groups
    puts "\n--- Groups ---------------------------------"
    MiqGroup.all.map do |u|
      puts "  created_on: #{u[:created_on]}"
      puts "  updated_on: #{u[:updated_on]}"
      puts "          id: #{u[:id]}"
      puts " description: #{u[:description]}"
      puts "  group_type: #{u[:group_type]}"
      puts "    sequence: #{u[:sequence]}"
      puts "    settings: #{u[:settings]}"
      puts "   tenant_id: #{u[:tenant_id]}"
      puts "--------------------------------------------"
    end

    puts "\n"
  end

  def dump_group_description_only
    puts "\n--- Group Descriptions ---------------------"
    MiqGroup.all.map do |u|
      puts " description: #{u[:description]}"
    end

    puts "--------------------------------------------\n"
  end


  def dump_one_user 

    u = User.find_by(:name => opts[:dump_one_user])
    puts "\n--- User -----------------------------------"
    puts "                   name: #{u[:name]}"
    puts "                 userid: #{u[:userid]}"
    puts "             created_on: #{u[:created_on]}"
    puts "             updated_on: #{u[:updated_on]}"
    puts "                     id: #{u[:id]}"
    puts "             first_name: #{u[:first_name]}"
    puts "              last_name: #{u[:last_name]}"
    puts "                  email: #{u[:email]}"
    puts "                   icon: #{u[:icon]}"
    puts "               settings: #{u[:settings]}"
    puts "              lastlogon: #{u[:lastlogon]}"
    puts "             lastlogoff: #{u[:lastlogoff]}"
    puts "       current_group_id: #{u[:current_group_id]}"
    puts "\n"

    puts "\n- Groups/Roles the user belongs to ---------"
    u.miq_groups.each do |g|
      puts "      #{g[:description]} / #{g.miq_user_role.name}"
    end
    puts "\n"

    g = MiqGroup.find_by(:id => u[:current_group_id])
    puts "\n- Current Group/Role------------------------"
    puts "      #{g[:description]} / #{g.miq_user_role.name}"
    puts "\n"

  end

  def dump_users 
    puts "\n--- Users ----------------------------------"
    User.all.map do |u|
      puts "       created_on: #{u[:created_on]}"
      puts "       updated_on: #{u[:updated_on]}"
      puts "               id: #{u[:id]}"
      puts "           userid: #{u[:userid]}"
      puts "             name: #{u[:name]}"
      puts "       first_name: #{u[:first_name]}"
      puts "        last_name: #{u[:last_name]}"
      puts "            email: #{u[:email]}"
      puts "             icon: #{u[:icon]}"
      puts "         settings: #{u[:settings]}"
      puts "        lastlogon: #{u[:lastlogon]}"
      puts "       lastlogoff: #{u[:lastlogoff]}"
      puts " current_group_id: #{u[:current_group_id]}"
      puts "--------------------------------------------"
    end

    puts "\n"
  end

  def dump_userid_only 
    puts "\n--- userids --------------------------------"
    User.all.map do |u|
      puts "  userid: #{u[:userid]}"
    end

    puts "--------------------------------------------\n"
  end

  def delete_a_user
    puts("#{__method__} Invokded delete user: ->#{opts[:delete_a_user]}<-")
  end

  def delete_all_users
    puts("#{__method__} Delete all users")
  end

end

class Cli
  attr_accessor :opts

  def parse(args, _env = {})
    args.shift if args.first == "--" # Handle when called through script/runner

    self.opts = Trollop.options(args) do
      opt :dump_one_user,
          "Display infor for one user",
          :short   => "u",
          :type    => :string

      opt :dump_users,
          "Display the users",
          :short   => "U",
          :default => false,
          :type    => :flag

      opt :dump_userid_only,
          "Only display the userid",
          :short   => "i",
          :default => false,
          :type    => :flag

      opt :dump_groups,
          "Display the groups",
          :short   => "G",
          :default => false,
          :type    => :flag

      opt :dump_group_description_only,
          "Only display the groups description",
          :short   => "g",
          :default => false,
          :type    => :flag

      opt :delete_all_users,
          "Delete all users from the database",
          :short   => "D",
          :default => false,
          :type    => :flag

      opt :delete_a_user,
          "Delete the specified user",
          :short   => "d",
          :type    => :string
    end

    self
  end

  def run
    Dump.new(opts).run
  end

  def self.run(args, env = {})
    new.parse(args, env).run
  end
end



if __FILE__ == $PROGRAM_NAME
  Cli.run(ARGV, ENV)
end
