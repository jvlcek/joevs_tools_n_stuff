#!/usr/bin/env bash

script_path=${0%/*}
if [[ ! -d "$script_path" ]]; then script_path="$PWD"; fi
. "$script_path/parse_args"
. "$script_path/deploy_podified_utils"

oc_logout() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"
  run_cmd "oc logout"
}

oc_login() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 3 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  host="$1"
  port="$2"
  user="$3"
  
  run_cmd "oc login https://${host}:${port} -u ${user}"
  if [[ $run_cmd_status -ne 0 ]]; then
    error_exit "${FUNCNAME} Failed to login"
  fi
}
  
new_project() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 3 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  project_name="$1"
  description="$2"
  displayname="$3"

  run_cmd "oc new-project ${project_name} --description=\"${description}\" --display-name=\"${displayname}\""
}

set_project() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 1 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  project_name="$1"

  run_cmd "oc project ${project_name}"
  if [[ $run_cmd_status -ne 0 ]]; then
    error_exit "${FUNCNAME} failed to set the project to ${project_name}"
  fi
}

add_service_accounts_to_anyuid_scc() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 1 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  project_name="$1"

  echo -e "\n  # Add the miq-anyuid and miq-orchestrator service accounts to the anyuid Security Context Constraints (SCC)"
  run_cmd "oc adm policy add-scc-to-user anyuid system:serviceaccount:${project_name}:miq-anyuid"
  run_cmd "oc adm policy add-scc-to-user anyuid system:serviceaccount:${project_name}:miq-orchestrator"
  run_cmd "oc describe scc anyuid | grep Users"
}

add_privileged_service_accounts_to_privileged_scc() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 1 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  project_name="$1"

  echo -e "\n  # Add the miq-privileged service account to the privileged Security Context Constraints (SCC)"
  run_cmd "oc adm policy add-scc-to-user privileged system:serviceaccount:${project_name}:miq-privileged"
  run_cmd "oc describe scc privileged | grep Users"
}

setup_the_miq-httpd_service_account() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 3 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  project_name="$1"
  git_repo="$2"
  git_branch="$3"

  echo -e "\n  # Create the miq-sysadmin SCC and add the miq-httpd service account to it."

  if [[ $minishift == true ]]; then
    run_cmd "oc create -f https://raw.githubusercontent.com/${git_repo}/manageiq-pods/${git_branch}/templates/miq-scc-sysadmin.yaml"
    scc="miq-sysadmin"
  else
    scc="anyuid"
  fi

  run_cmd "oc adm policy add-scc-to-user ${scc} system:serviceaccount:${project_name}:miq-httpd"
  run_cmd "oc describe scc ${scc} | grep Users"
}

create_db_pv() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 1 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  project_name="$1"

  if [[ $minishift == true ]]; then
    echo -e "\n  # Make a persistent volume to host the MIQ database data"

    # JJV TBD
  fi
}

deploy_miq() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 2 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  git_repo="$1"
  git_branch="$2"

  echo -e "\n  # Create the MIQ template for deployment and verify it is now available in your project"
  run_cmd "oc create -f https://raw.githubusercontent.com/ManageIQ/manageiq-pods/master/templates/miq-template.yaml"
  run_cmd "oc new-app --template=manageiq"
}

# JJV TODO Add Clean all this stuff up and start from scratch
  
parse_args "$@"
oc_logout
oc_login "${openshift_host}" "${openshift_port}" "${openshift_user}"
new_project "${project_name}" "${project_description}" "${project_displayname}"
set_project "${project_name}"
add_service_accounts_to_anyuid_scc "${project_name}"
add_privileged_service_accounts_to_privileged_scc "${project_name}"
setup_the_miq-httpd_service_account "${project_name}" "${git_repo}" "${git_branch}"
create_db_pv "${project_name}"
deploy_miq "${git_repo}" "${git_branch}"

