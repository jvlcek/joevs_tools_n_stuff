#!/usr/bin/env bash

script_path=${0%/*}
if [[ ! -d "$script_path" ]]; then script_path="$PWD"; fi
. "$script_path/parse_podify_args"
. "$script_path/podified_utils"

add_service_accounts_to_anyuid_scc() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 2 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  project_name="$1"
  template_name="$2"

  echo -e "\n  # Add the ${template_name}-anyuid and ${template_name}-orchestrator service accounts to the anyuid Security Context Constraints (SCC)"
  run_cmd "oc adm policy add-scc-to-user anyuid system:serviceaccount:${project_name}:${template_prefix}-anyuid"
  run_cmd "oc adm policy add-scc-to-user anyuid system:serviceaccount:${project_name}:${template_prefix}-orchestrator"
  run_cmd "oc describe scc anyuid | grep Users"
}

add_privileged_service_accounts_to_privileged_scc() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 2 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  project_name="$1"
  template_name="$2"

  echo -e "\n  # Add the ${template_name}-privileged service account to the privileged Security Context Constraints (SCC)"
  run_cmd "oc adm policy add-scc-to-user privileged system:serviceaccount:${project_name}:${template_prefix}-privileged"
  run_cmd "oc describe scc privileged | grep Users"
}

setup_the_httpd_service_account() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 3 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  project_name="$1"
  template_name="$2"
  templates="$3"

  echo -e "\n  # Create the ${template_name}-sysadmin SCC and add the ${template_name}-httpd service account to it."

  if [[ $minishift == true ]]; then
    run_cmd "oc create -f ${templates}/${template_name}-scc-sysadmin.yaml"
    scc="${template_name}-sysadmin"
  else
    scc="anyuid"
  fi

  run_cmd "oc adm policy add-scc-to-user ${scc} system:serviceaccount:${project_name}:${template_prefix}-httpd"
  run_cmd "oc describe scc ${scc} | grep Users"
}

create_db_pv() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 1 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  project_name="$1"

  if [[ $minishift == true ]]; then
    echo -e "\n  # Make a persistent volume to host the database data"

    # JJV TBD
  fi
}

deploy_mgr() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  if [[ $# -ne 4 ]]; then
    error_exit "${FUNCNAME} invoked with wrong number of arguments"
  fi
  template_name="$1"
  template_name="$2"
  templates="$3"
  application_domain="$4"

  echo -e "\n  # Create the template for deployment and verify it is now available in your project"
  run_cmd "oc create -f ${templates}/${template_prefix}-template.yaml"

  if [[ "${application_domain}" == "" ]]; then
    run_cmd "oc new-app --template=${template_name}"
  else
    run_cmd "oc new-app --template=${template_name} -p APPLICATION_DOMAIN=${application_domain}"
  fi
}

parse_podify_args "$@"
oc_logout
oc_login "${openshift_host}" "${openshift_port}" "${openshift_user}"
new_project "${project_name}" "${project_description}" "${project_displayname}"
set_project "${project_name}"
add_service_accounts_to_anyuid_scc "${project_name}" "${template_name}"
add_privileged_service_accounts_to_privileged_scc "${project_name}" "${template_name}"
setup_the_httpd_service_account "${project_name}" "${template_name}" "${templates}"
create_db_pv "${project_name}"
deploy_mgr "${template_name}" "${template_name}" "${templates}" "${application_domain}"
