#!/usr/bin/env bash

# This script creates usefull Openshift related shell functions.
# It assumes `oc login` has been executed.

# To run these functions from the command line do:
# ### Do a one time create of a sym link
#    cd $HOME/pods
#    ln -s ${MY_GIT_REPOS}/joevs_tools_n_stuff/POD_AUTH_TOOLS
#
# ### Source this file
#
# export POD_HOME="${HOME}/pods"
# . ${POD_HOME}/POD_AUTH_TOOLS/cmd_line_utils 
# 
# ### or add the following to ~/.bashrc
#    export POD_HOME="${HOME}/pods"
#    if [[ -f "${POD_HOME}/POD_AUTH_TOOLS/cmd_line_utils" ]]; then
#      . ${POD_HOME}/POD_AUTH_TOOLS/cmd_line_utils 
#    fi
#

# +-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=
# Common pod commands
# +-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=
pod_scale_up() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  pod_name=$1
  oc scale dc ${pod_name} --replicas=1
}

pod_scale_down() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  pod_name=$1
  oc scale dc ${pod_name} --replicas=0
}

pod_scale_down_wait() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  pod_name=$1

  counter=0
  while [[ $( eval "${pod_name}_pod" | wc -l ) -ne 0 ]] &&
        [[ ${counter} -lt 20 ]]; do
    counter=$((counter+1))
    echo "  ${counter} scale down wait ${pod_name}"
    sleep 2
  done
  echo "Done"
}

pod_scale_up_wait() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  pod_name=$1

  counter=0
  while [[ $( eval "${pod_name}_pod_status" ) != "Running" ]] &&
        [[ ${counter} -lt 20 ]]; do
    counter=$((counter+1))
    echo "  ${counter} scale up wait ${pod_name}"
    sleep 2
  done
  echo "Done"
}

pod_restart() {
  echo -e "\n*** Invoked function ${FUNCNAME} ***"

  pod_name=$1
  pod_scale_down      ${pod_name}
  pod_scale_down_wait ${pod_name}
  pod_scale_up        ${pod_name}
  pod_scale_up_wait   ${pod_name}
}

# +-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=
# httpd pod commands
# +-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=
httpd_pod() {
  oc get pods | egrep "httpd-[1-9]" | cut -f1 -d" "
}

httpd_pod_update_cm() {
  cm_file=$1

  if [[ $# -ne 1 ]]; then      
    echo -e "${FUNCNAME} invoked with wrong number of arguments"
    echo -e "${FUNCNAME} Must specify configmap file name"
  else
    if [[ -f ${cm_file} ]]; then
      oc replace configmaps httpd-auth-configs --filename ./${cm_file}
    else
      echo -e "ERROR: ./${cm_file} not found"
    fi
  fi
}

httpd_pod_restart() {
  pod_restart "httpd"
}

httpd_pod_status() {
  oc get pods | egrep "httpd-[1-9]" | sed s/" [[:space:]]*"/" "/g  | cut -f 3 -d " "
}

ssh2httpd() {
  oc rsh `httpd_pod` bash -i
}

# +-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=
# httpd-configmap-generator (cmg) pod commands
# +-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=
httpd-configmap-generator_pod() {
  oc get pods | grep "httpd-configmap-generator" | cut -f1 -d" "
}

cmg_pod() {
  oc get pods | grep "httpd-configmap-generator" | cut -f1 -d" "
}

cmg_pod_restart() {
  pod_restart "httpd-configmap-generator"
}

httpd-configmap-generator_pod_status() {
  oc get pods | grep "httpd-configmap-generator" | sed s/" [[:space:]]*"/" "/g  | cut -f 3 -d " "
}

cmg_pod_status() {
  oc get pods | grep "httpd-configmap-generator" | sed s/" [[:space:]]*"/" "/g  | cut -f 3 -d " "
}

ssh2cmg() {
  oc rsh `cmg_pod` bash -i
}

# +-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=
# Mmanager (CFME, cloudforms, MiQ, manageiq) commands
# +-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=+-=

tail_logs() {
  oc logs -f cloudforms-0
}

